name: GitHub server installation

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      tags:
        required: False
        description: 'Optional. Use a "tag expression" specify which tagged tests to run (https://cucumber.io/docs/cucumber/api/#tag-expressions)'
      show_docker_output:
        required: false
        default: false
        type: boolean
        description: 'Show the docker logs while building the GitHub server container. It will also save the docker log artifact. This might show sensitive config information.'
      #### Developer note: You can probably leave this out
      enable_tmate:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:

  github-server-tests:
    #### Developer note: If under `on` (above) you have both `push` and
    #### `pull_request`, this avoids running double tests when someone
    #### on the team makes a pull request
    # 1: Trigger job on push or dispatch from this repository
    # 2: Trigger job on pull request from a fork
    if: (
          github.event_name != 'pull_request'
          && ! github.event.pull_request.head.repo.fork
        ) || (
          github.event_name == 'pull_request'
          && github.event.pull_request.head.repo.fork
        )
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    #### Developer note: You can probably leave out these specific
    #### environment variables. You may not even need the `env`
    #### keyword or values at all. See
    #### https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/alkiln/writing#env-vars
    env:
      SECRET_VAR1: secret-var1-value
      SECRET_VAR2: secret-var2-value
      SECRET_FOR_MISSING_FIELD: secret for missing field
      
    steps:
      # Place the root directory in this branch to access
      # relative paths to action files
      - uses: actions/checkout@v4

      - name: ALKiln - Start the isolated temporary docassemble server on GitHub
        id: github_server
        #### Developer note: you'll need to replace `uses: ./action_for_github_server`
        #### with the path to ALKiln’s repository name and branch name. For example,
        #### for version 5, use the branch name `v5`:
        #### `uses: suffolkLITLab/ALKiln/action_for_github_server@v5`
        uses: ./action_for_github_server
        with:
          #### Developer note: Set this to "true" to show docker logs and
          #### allow ALKiln to create the docker logs output artifact.
          SHOW_DOCKER_OUTPUT: "${{ github.event.inputs.show_docker_output }}"
          #### Developer note: You can probably leave this out
          CONFIG_CONTENTS: "${{ secrets.CONFIG_CONTENTS }}"
      - run: echo "ALKiln finished starting the isolated GitHub docassemble server"
        shell: bash

      # #### Developer note: You can probably leave this out
      # # Optional debugging to explore things like docker issues
      # - name: Docker debug tmate session
      #   if: ${{ failure() && github.event.inputs.enable_tmate == 'true' }}
      #   uses: mxschmitt/action-tmate@v3

      #### Developer note: You can probably leave this out
      - name: Run ALKiln - Env vars for our own tests from server output
        run: |
          echo "USER1_EMAIL=${{ steps.github_server.outputs.DA_ADMIN_EMAIL }}" >> $GITHUB_ENV
          echo "USER1_PASSWORD=${{ steps.github_server.outputs.DA_ADMIN_PASSWORD }}" >> $GITHUB_ENV

      #### Developer note:
      #### Example of working with the docker container after it's been
      #### started. For example, you can make more users with different
      #### permissions and passwords
      #- name: Work with docker
      #  run: |
      #    container_name=$(docker ps --format '{{.Names}}' | head -n 1)
      #    echo "container_name is $container_name"

      - name: "Run ALKiln tests"
        if: ${{ success() }}
        id: alkiln
        #### Developer note: you'll need to replace `uses: ./`
        #### with the path to ALKiln’s repository name and branch name. For example,
        #### for version 5, use the branch name `v5`: `uses: suffolkLITLab/ALKiln@v5`
        uses: ./
        #### Developer note: You can probably leave out this `env` section
        env:
          # Internal: docassemble changes sometimes break @a11y tests. That is
          # a da problem, not ours. We will trigger these tests manually when we
          # want to check up on this.
          ALKILN_TAG_EXPRESSION: "${{ (github.event.inputs.tags && format('{0}', github.event.inputs.tags)) || '(not @a11y) and (not @error)' }}"
        with:
          #### Developer note: Required inputs. See
          #### https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/alkiln/writing/#sandbox-inputs
          SERVER_URL: "${{ steps.github_server.outputs.SERVER_URL }}"
          DOCASSEMBLE_DEVELOPER_API_KEY: "${{ steps.github_server.outputs.DOCASSEMBLE_DEVELOPER_API_KEY }}"
          INSTALL_METHOD: "server"
          #### Developer note: You can probably leave the rest out
          #### To learn more, see https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/alkiln/writing/#optional-inputs
          ALKILN_TAG_EXPRESSION: "${{ env.ALKILN_TAG_EXPRESSION }}"
          ALKILN_VERSION: output


      - shell: bash
        if: ${{ failure() }}
        id: files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Make an issue with file contents or 'no file' as part of the body

          # ex: "alkiln-2024-05-23 at 11h35m09sUTC/"
          FOLDER=$(ls -d */ | grep -E '^alkiln-*')

          # REPORT_PATH="${FOLDER}report.txt"
          UNEXPECTED_RESULTS_PATH="${FOLDER}unexpected_results.txt"
          # DEBUG_LOG_PATH="${FOLDER}debug_log.txt"

          if [ -f "$UNEXPECTED_RESULTS_PATH" ]; then
            UNEXPECTED_RESULTS=$(cat "$UNEXPECTED_RESULTS_PATH")
          else
            UNEXPECTED_RESULTS="unexpected_results.txt does not exist. Something other than the tests may have failed."
          fi

          gh issue create --title "Parse file in workflow: Test if failed tests make issue" --body "An ALKiln test run failed. See the action at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}.
          
          ### Results:

          $UNEXPECTED_RESULTS" --repo "$GITHUB_REPOSITORY" --label "testing"

      # ### Developer note: Example of making an issue when tests fail, part 1
      # #- name: Get ALKiln output files
      # #  if: ${{ failure() }}
      # #  run: |
      # #    # Get ALKiln output files
      # #    echo "REPORT=${{ steps.alkiln.outputs.REPORT }}" >> $GITHUB_ENV
      # #    echo "UNEXPECTED_RESULTS=${{ steps.alkiln.outputs.UNEXPECTED_RESULTS }}" >> $GITHUB_ENV
      # #    echo "DEBUG_LOG=${{ steps.alkiln.outputs.DEBUG_LOG }}" >> $GITHUB_ENV

      # # Step to create an issue with the file content
      # - name: 1 Create issue
      #   if: ${{ failure() && '$UNEXPECTED_RESULTS' != 'false' }}
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     UNEXPECTED_RESULTS: "${{ steps.alkiln.outputs.UNEXPECTED_RESULTS }}"
      #     B64: "${{ steps.alkiln.outputs.B64 }}"
      #   run: |
      #     #echo "env.UNEXPECTED_RESULTS: ${{ env.UNEXPECTED_RESULTS }}"
      #     #echo "dollar UNEXPECTED_RESULTS: $UNEXPECTED_RESULTS"
      #     #UNEXPECTED_RESULTS_2="UNEXPECTED_RESULTS_2: ${{ steps.alkiln.outputs.UNEXPECTED_RESULTS }}"
      #     #echo "dollar UNEXPECTED_RESULTS_2: $UNEXPECTED_RESULTS_2"
      #     #echo "dollar UNEXPECTED_RESULTS_3: $UNEXPECTED_RESULTS_3"
      #     # This will probably break because of new lines
      #     gh issue create --title "Decode in bash: Test if failed tests make issue" --body "1: An ALKiln test run failed. See the action at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. ### Report of unexpected results:=====dollar UNEXPECTED_RESULTS_2===== $UNEXPECTED_RESULTS @@@@@@@ $(echo "$B64" | base64 --decode)" --repo "$GITHUB_REPOSITORY"

      # #### Developer note: Example of making an issue when tests fail, part 2
      # #### You can do this with any type of GitHub test
      # #### Change the name, title, body, and labels
      # #### To learn more, search online for actions-ecosystem/action-create-issue
      # - name: "2 If tests failed, create an issue"
      #   if: ${{ failure() && '$UNEXPECTED_RESULTS' != 'false' }}
      #   uses: actions-ecosystem/action-create-issue@v1
      #   env:
      #     UNEXPECTED_RESULTS: "${{ steps.alkiln.outputs.UNEXPECTED_RESULTS }}"
      #     B64: "$(echo steps.alkiln.outputs.B64 | base64 --decode)"
      #   with:
      #     github_token: ${{ secrets.github_token }}
      #     title: "Decode in env var: Test if failed tests make issue"
      #     body: |
      #       An ALKiln test run failed. See the action at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}.

      #       ### Report of unexpected results:

      #       ${{ env.UNEXPECTED_RESULTS }}

      #       ${{ env.B64 }}
      #     labels: |
      #       testing

      # #### Developer note: Example of making an issue when tests fail, part 2
      # #### You can do this with any type of GitHub test
      # #### Change the name, title, body, and labels
      # #### To learn more, search online for actions-ecosystem/action-create-issue
      # - name: "3 If tests failed, create an issue"
      #   if: ${{ failure() && '$UNEXPECTED_RESULTS' != 'false' }}
      #   uses: actions-ecosystem/action-create-issue@v1
      #   env:
      #     UNEXPECTED_RESULTS: "${{ steps.alkiln.outputs.UNEXPECTED_RESULTS }}"
      #     B64: "${{ steps.alkiln.outputs.B64 }}"
      #   with:
      #     github_token: ${{ secrets.github_token }}
      #     title: "Decode inline: Test if failed tests make issue"
      #     body: |
      #       An ALKiln test run failed. See the action at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}.

      #       ### Report of unexpected results:

      #       $(echo $B64 | base64 --decode)
      #     labels: |
      #       testing

      #- name: Setup tmate session
      #  if: ${{ always() }}
      #  uses: mxschmitt/action-tmate@v3
