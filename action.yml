name: "ALKiln: Automated docassemble tests"
description: "Automatically test any docassemble interview in a any branch on your GitHub repository whenever you commit or push. See https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing."

inputs:
  SERVER_URL:
    description: 'The url of your docassemble server. This should be in your GitHub SECRETS or the SECRETS of your org.'
    required: true
  PLAYGROUND_EMAIL:
    description: 'The email of your docassemble testing account. This should be in your GitHub SECRETS or the SECRETS of your org.'
    required: true
  PLAYGROUND_PASSWORD:
    description: 'The password of your docassemble testing account. This should be in your GitHub SECRETS or the SECRETS of your org.'
    required: true
  PLAYGROUND_ID:
    description: 'The id of your docassemble testing account. This should be in your GitHub SECRETS or the SECRETS of your org.'
    required: true
  DOCASSEMBLE_DEVELOPER_API_KEY:
    description: 'API key of the testing account with developer permissions on your docassemble server.'
    required: true
  EXTRA_LANGUAGES:
    description: 'Other languages you want to test. This should be in your GitHub SECRETS or the SECRETS of your org.'
    required: false
    default: ''
  # This is necessary to test pre-releases at the very least. It does seem
  # strange considering we're controlling everything through the action, but
  # that actually doesn't touch the npm version that's pulled in.
  ALKILN_VERSION:
    description: 'Version of ALKiln to get from npm.'
    required: false
    default: '^4.0.0'
  MAX_SECONDS_FOR_SETUP:
    description: "Amount of time to give the Project to upload your package's GitHub code."
    required: false
    default: '120'

runs:
  using: "composite"
  steps:
    # Set environment variables
    - name: "ALKiln: Set environment variables"
      # If extra languages were set manually, override the repository
      # EXTRA_LANGUAGES secret with the manually set values
      # Human-readable date/time:
      # https://www.shell-tips.com/linux/how-to-format-date-and-time-in-linux-macos-and-bash/#how-to-format-a-date-in-bash
      run: |
        echo "ARTIFACT_NAME=alkiln_tests_output $(date +'%Y-%m-%d at %Hhrs %Mmins %Ssecs' -u) UTC" >> $GITHUB_ENV
        if ${{ github.event.inputs.extra_languages != '' }}
        then
          echo "Manually set languages: ${{ github.event.inputs.extra_languages }}"
          echo "EXTRA_LANGUAGES=${{ github.event.inputs.extra_languages }}" >> $GITHUB_ENV
        else
          echo "Use EXTRA_LANGUAGES secret: ${{ inputs.EXTRA_LANGUAGES }}"
          echo "EXTRA_LANGUAGES=${{ inputs.EXTRA_LANGUAGES }}" >> $GITHUB_ENV
        fi
        echo "REPO_URL=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_ENV
        echo "BRANCH_PATH=${{ github.ref }}" >> $GITHUB_ENV
        echo "BASE_URL=${{ inputs.SERVER_URL }}" >> $GITHUB_ENV
        echo "PLAYGROUND_EMAIL=${{ inputs.PLAYGROUND_EMAIL }}" >> $GITHUB_ENV
        echo "PLAYGROUND_PASSWORD=${{ inputs.PLAYGROUND_PASSWORD }}" >> $GITHUB_ENV
        echo "PLAYGROUND_ID=${{ inputs.PLAYGROUND_ID }}" >> $GITHUB_ENV
        echo "DOCASSEMBLE_DEVELOPER_API_KEY=${{ inputs.DOCASSEMBLE_DEVELOPER_API_KEY }}" >> $GITHUB_ENV
        echo "ALKILN_VERSION=${{ inputs.ALKILN_VERSION }}" >> $GITHUB_ENV
        echo "MAX_SECONDS_FOR_SETUP=${{ inputs.MAX_SECONDS_FOR_SETUP }}" >> $GITHUB_ENV
      shell: bash
    - name: "ALKiln: confirm info"
      run: |
        echo -e "\nRepo is $REPO_URL\nBranch ref is $BRANCH_PATH\nManually added languages are $EXTRA_LANGUAGES\nAll other data is secret\n"
        echo -e "\nALKiln version is $ALKILN_VERSION\nRepo is $REPO_URL\nBranch ref is $BRANCH_PATH\nMAX_SECONDS_FOR_SETUP is $MAX_SECONDS_FOR_SETUP\nManually added languages are $EXTRA_LANGUAGES\n"
      shell: bash

    # This doesn't use an already established package-lock.json and that
    # comes with some types of test breaking risks. Same problem as before.
    - name: Temporarily overwrite or create package.json
      run: |
        cat << EOF > "package.json"
        {
          "scripts": {
            "test": "npm run langs_setup && npm run cucumber -- $@",
            "cucumber_base": "./node_modules/.bin/cucumber-js --require ./node_modules/@suffolklitlab/alkiln/lib/index.js",
            "cucumber": "run_cucumber(){ npm run cucumber_base -- \"$@\" docassemble/*/data/sources/*.feature; }; run_cucumber",
            "langs": "npm run langs_setup && ./node_modules/.bin/cucumber-js --require ./node_modules/.bin/alkiln-cucumber docassemble/*/data/sources/*_lang*.feature",
            "langs_setup": "node_modules/.bin/alkiln-langs 'docassemble/*/data/sources/*.feature'",
            "setup": "node_modules/.bin/alkiln-setup",
            "takedown": "node_modules/.bin/alkiln-takedown"
          },
          "dependencies": {
            "colors": "1.4.0",
            "@cucumber/cucumber": "7.3.2",
            "@suffolklitlab/alkiln": "$ALKILN_VERSION"
          }
        }
        EOF
        # Keep in sync with the cucumber.js in root
        cat << EOF > "cucumber.js"
        module.exports = {
          default: "--require ./lib/index.js --format progress --format summary:cucumber-report.txt"
        }
        EOF
      shell: bash

    # Install node
    - name: "ALKiln: Install node packages"
      uses: actions/setup-node@v1
      with:
        node-version: "17"
    - run: npm install
      shell: bash

    # Run tests
    - name: "ALKiln: Create a Project and pull the package from GitHub"
      run: npm run setup
      shell: bash
    - name: "ALKiln: Run tests"
      if: ${{ success() }}
      run: npm run test -- ${{ github.event.inputs.tags && format('"--tags" "{0}"', github.event.inputs.tags) }}
      shell: bash
    - run: echo -e "\n\n====ALKiln could not create a project on your server's testing account or pull your package into it. Check the messages above this line.\n\n"
      if: ${{ failure() }}
      shell: bash
    - name: "ALKiln: Delete project from docassemble test account"
      if: ${{ always() }}
      run: npm run takedown
      shell: bash
    
    # Upload artifacts that subscribers can download on the Actions summary page
    - name: "ALKiln: Upload artifacts folder"
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./alkiln_tests_output-*

# ##################################
# # A developer's workflow should look similar to the below
# # In place of `uses: suffolkLITLab/ALKiln@releases/v4`, they
# # might use another version.
#
# name: Use the ALKiln testing framework v4 to run tests
# on:
#   push:
#   workflow_dispatch:
#     inputs:
#       extra_languages:
#         description: 'Optional. A list of comma separated language names visible on buttons or links in the interview that change the language of the interview. Overrides the EXTRA_LANGUAGES GitHub secret.'
#         default: ''
#       tags:
#         description: 'Optional. Use a "tag expression" specify which tagged tests to run. See https://cucumber.io/docs/cucumber/api/#tag-expressions for syntax.'
#         default: ''
#
# jobs:
#
#   interview-testing:
#     runs-on: ubuntu-latest
#     name: Run interview tests
#     steps:
#       - uses: actions/checkout@v2
#       - name: Use ALKiln to run tests
#         uses: suffolkLITLab/ALKiln@releases/v4
#         with:
#           SERVER_URL: "${{ secrets.SERVER_URL }}"
#           DOCASSEMBLE_DEVELOPER_API_KEY: "${{ secrets.DOCASSEMBLE_DEVELOPER_API_KEY }}"
#       - run: echo "Finished running ALKiln tests"
