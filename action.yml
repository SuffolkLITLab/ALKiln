name: "ALKiln: Automated docassemble tests"
description: "Automatically test any docassemble interview in a any branch on your GitHub repository whenever you commit or push. See https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing."

inputs:
  SERVER_URL:
    description: 'The url of your docassemble server. This should be in your GitHub SECRETS or the SECRETS of your org.'
    required: true
  DOCASSEMBLE_DEVELOPER_API_KEY:
    description: 'API key of the testing account with developer permissions on your docassemble server.'
    required: true
  # This is necessary to test pre-releases at the very least. It does seem
  # strange considering we're controlling everything through the action, but
  # that actually doesn't touch the npm version that's pulled in.
  ALKILN_VERSION:
    description: 'Version of ALKiln to get from npm.'
    required: false
    default: '^5.0.0'
  MAX_SECONDS_FOR_SETUP:
    description: "Amount of time to give the Project to upload your package's GitHub code."
    required: false
  SERVER_RELOAD_TIMEOUT_SECONDS:
    description: "Max amount of time to give the server to reload if it needs to"
    required: false
    # no default to let the custom Scenario timeouts create the reload timeout
  INSTALL_METHOD:
    description: "Default is 'playground'. Other option: 'server'. How to install the package onto the server."
    required: false
    default: "playground"
  ALKILN_TAG_EXPRESSION:
    description: "The tag expression to use to limit which tests to run. Default is no tag expression."
    required: false
  DOCASSEMBLECLI_VERSION:
    description: "The version of docassemblecli to install."
    required: false
    default: "0.0.17"

runs:
  using: "composite"
  steps:
    # Place the root directory in this branch
    - uses: actions/checkout@v3

    # Set environment variables
    - name: "ALKiln setup info: Set environment variables"
      # Safe input handling. Avoid evaluating in bash.
      env:
        BRANCH_PATH: ${{ github.ref }}
        BASE_URL: ${{ inputs.SERVER_URL }}
        DOCASSEMBLE_DEVELOPER_API_KEY: ${{ inputs.DOCASSEMBLE_DEVELOPER_API_KEY }}
        ALKILN_VERSION: ${{ inputs.ALKILN_VERSION }}
        MAX_SECONDS_FOR_SETUP: ${{ inputs.MAX_SECONDS_FOR_SETUP }}
        SERVER_RELOAD_TIMEOUT_SECONDS: ${{ inputs.SERVER_RELOAD_TIMEOUT_SECONDS }}
        DOCASSEMBLECLI_VERSION: ${{ inputs.DOCASSEMBLECLI_VERSION }}
      run: |
        # ALKiln setup info: Set environment variables
        # Human-readable date/time: https://www.shell-tips.com/linux/how-to-format-date-and-time-in-linux-macos-and-bash/#how-to-format-a-date-in-bash
        echo "ARTIFACT_NAME=alkiln-$(date +'%Y-%m-%d at %Hh%Mm%Ss' -u)UTC" >> $GITHUB_ENV
        echo "REPO_URL=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_ENV
        echo "BRANCH_PATH=$BRANCH_PATH" >> $GITHUB_ENV
        # Workflow inputs
        echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
        echo "DOCASSEMBLE_DEVELOPER_API_KEY=$DOCASSEMBLE_DEVELOPER_API_KEY" >> $GITHUB_ENV
        echo "ALKILN_VERSION=$ALKILN_VERSION" >> $GITHUB_ENV
        echo "MAX_SECONDS_FOR_SETUP=$MAX_SECONDS_FOR_SETUP" >> $GITHUB_ENV
        echo "SERVER_RELOAD_TIMEOUT_SECONDS=$SERVER_RELOAD_TIMEOUT_SECONDS" >> $GITHUB_ENV
        echo "DOCASSEMBLECLI_VERSION=$DOCASSEMBLECLI_VERSION" >> $GITHUB_ENV
        # Hard-coded internal ALKiln vars
        echo "_ORIGIN=github" >> $GITHUB_ENV
      shell: bash
    - name: "ALKiln setup info: confirm environment variables"
      run: |
        # ALKiln setup info: confirm environment variables
        echo -e "\nALKiln version is $ALKILN_VERSION\nRepo is $REPO_URL\nBranch ref is $BRANCH_PATH\nMAX_SECONDS_FOR_SETUP is $MAX_SECONDS_FOR_SETUP\nSERVER_RELOAD_TIMEOUT_SECONDS is $SERVER_RELOAD_TIMEOUT_SECONDS\n"
      shell: bash

    # Install
    - name: "ALKiln setup info: Install node packages"
      uses: actions/setup-node@v3
      with:
        node-version: "18"
    - name: Install ALKiln directly from npm
      run: |
        # ALKiln setup info: Install ALKiln directly from npm
        npm install -g "@suffolklitlab/alkiln@$ALKILN_VERSION"
      shell: bash

    # Install on playground

    # Don't rely on the environment's version of python
    - uses: actions/setup-python@v5
      if: ${{ inputs.INSTALL_METHOD == 'playground' }}
      with:
        python-version: '3.10'
    - name: "ALKiln: Create a Project and install the package from GitHub"
      if: ${{ inputs.INSTALL_METHOD == 'playground' }}
      run: |
        # ALKiln setup info: Create a Project and install the package from GitHub
        pip install "docassemblecli==$DOCASSEMBLECLI_VERSION"
        alkiln-setup
      shell: bash
    - name: "ALK0@@@ ALKiln setup ERROR"
      run: echo -e "\n\n====\nALK0@@@ ALKiln ERROR - could not create a project on your server's testing account or pull your package into it. Check the messages above this line.\n\n"
      if: ${{ inputs.INSTALL_METHOD == 'playground' && failure() }}
      shell: bash

    # Server installations - find folders and save session vars
    - name: "ALKiln setup info: Install the GitHub package onto the server"
      if: ${{ inputs.INSTALL_METHOD == 'server' }}
      run: alkiln-server-install
      shell: bash
    - name: "ALK0@@@ ALKiln setup ERROR"
      run: echo -e "\n\n====\nALK0@@@ ALKiln ERROR - could not install the package on the temporary GitHub docassemble server. Check the steps above this line.\n\n"
      if: ${{ inputs.INSTALL_METHOD == 'server' && failure() }}
      shell: bash

    # run tests
    - name: "ALKiln info: Run tests"
      if: ${{ success() }}
      env:
        ALKILN_TAG_EXPRESSION: ${{ inputs.ALKILN_TAG_EXPRESSION || github.event.inputs.tags && format('{0}', github.event.inputs.tags) }}
      run: alkiln-run $ALKILN_TAG_EXPRESSION
      shell: bash
    
    # on playground, delete project
    - name: "ALKiln info: Try to delete the project from the playground of the docassemble test account."
      if: ${{ always() && inputs.INSTALL_METHOD == 'playground' }}
      run: alkiln-takedown
      shell: bash
    
    # Upload artifacts that subscribers can download on the Actions summary page
    - name: "ALKiln info: Upload artifacts folder"
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./alkiln-*

    - run: echo "ALkiln finished running tests"
      shell: bash

# ##################################
# # A developer's workflow should look similar to the below.
# # In place of `uses: suffolkLITLab/ALKiln@v5`, they
# # might use another version.
#
# name: ALKiln v5 tests
# on:
#   push:
#   workflow_dispatch:
#     inputs:
#       tags:
#         description: 'Optional. Use a "tag expression" specify which tagged tests to run. See https://cucumber.io/docs/cucumber/api/#tag-expressions for syntax.'
#         default: ''
#
# jobs:
#
#   interview-testing:
#     runs-on: ubuntu-latest
#     name: Run interview tests
#     steps:
#       - name: Use ALKiln to run tests
#         uses: suffolkLITLab/ALKiln@v5
#         with:
#           SERVER_URL: "${{ secrets.SERVER_URL }}"
#           DOCASSEMBLE_DEVELOPER_API_KEY: "${{ secrets.DOCASSEMBLE_DEVELOPER_API_KEY }}"
