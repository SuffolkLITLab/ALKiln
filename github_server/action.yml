name: "ALKiln/github_server: Isolated docassemble tests"
description: "Download and start up a temporary docassemble server on GitHub's servers, in an isolated environment. Avoids docassemble reload errors and other external factors."


inputs:
  CONFIG_CONTENTS:
    description: "The contents of the config file of the docassemble server"
    required: false
  # This is necessary to test pre-releases at the very least. It does seem
  # strange considering we're controlling everything through the action, but
  # that actually doesn't touch the npm version that's pulled in.
  #ALKILN_VERSION:
  #  description: 'Version of ALKiln to get from npm.'
  #  required: false
  #  default: '^5.0.0'
  MAX_SECONDS_FOR_DOCKER:
    description: "Maximum amount of seconds to give the docassemble docker container to serve the site."
    required: false
    default: 600  # 10 min
  #MAX_SECONDS_FOR_SETUP:
  #  description: "Amount of seconds to give the Project to upload your package's GitHub code."
  #  required: false
  #SERVER_RELOAD_TIMEOUT_SECONDS:
  #  description: "Max amount of seconds to give the server to reload if it needs to"
  #  required: false
  #  # no default to let the custom Scenario timeouts create the reload timeout

outputs:
  DOCASSEMBLE_DEVELOPER_API_KEY:
    description: "Use this inside `with:` for the ALKiln step. Temporary admin api key. It will be destroyed after the tests are done."
    value: ${{ steps.api_key_output_step.outputs.DOCASSEMBLE_DEVELOPER_API_KEY }}
  SERVER_URL:
    description: "Use this inside `with:` for the ALKiln step. URL of the temporary docassemble server."
    value: "http://localhost"


runs:
  using: "composite"
  steps:
      - name: "github_server: Set environment variables"
        run: |
          echo "DA_ADMIN_API_KEY=abcd1234abcd1234abcd5678abdc5678" >> $GITHUB_ENV
        shell: bash
      - id: api_key_output_step
        run: echo "::set-output name=DOCASSEMBLE_DEVELOPER_API_KEY::$DA_ADMIN_API_KEY"
        shell: bash
      - name: "github_server: Download and start docker"
        run: |
          mkdir /tmp/config
          echo "${{ inputs.CONFIG_CONTENTS }}" > /tmp/config/myconfig.yml 
          docker pull jhpyle/docassemble
          docker run --env DA_ADMIN_EMAIL="admin@example.com" --env DA_ADMIN_PASSWORD="password" --env DA_ADMIN_API_KEY="${{ env.DA_ADMIN_API_KEY }}" --env DA_CONFIG=/tmp/config/myconfig.yml --volume /tmp/config:/tmp/config --cap-add SYS_PTRACE --memory="4gb" -d -p 80:80 jhpyle/docassemble
        shell: bash
      - name: "github_server: Wait for server to start"
        run: |
          # Wait 1 minute before pinging the server constantly
          sleep 60

          # Use a variable we can control to avoid race conditions from
          # preventing the success log message.
          ready="false"
          # Reset the SECONDS variable
          SECONDS=60

          while [[ $ready == "false" ]]; do
            echo "Time ellapsed: $SECONDS seconds"

            # Get input for max number of seconds to wait
            # ${{ inputs.MAX_SECONDS_FOR_DOCKER }} as a number? Bash doesn't have types, just strings
            # Check if max seconds till loading has passed
            if [[ $SECONDS -ge 600 ]]; then
              echo "Error: Timed out waiting for docker container to serve the site."
              break
            fi

            # Set the variable to a new string value in each iteration
            result=$(curl -s localhost)

            # Check if the string includes the desired text
            if [[ ! $result == *"Docassemble is starting"* ]]; then
              echo "Success! The docker container is ready!"
              ready="true"
            else
              echo "The docker container isn't ready yet. Will check again in 30 seconds."
              sleep 30
            fi

          done
        shell: bash
      #- name: "github_server: Install ALKiln"
      #  run: npm install -g @suffolklitlab/alkiln@${{ inputs.ALKILN_VERSION }}
      #  shell: bash
      #- name: "github_server: Install this package"
      #  run: alkiln-startserver
      #  shell: bash
      #- name: "github_server: Run Kiln"
      #  # TODO: Research how to get this to always be the same branch we're on
      #  # Would ${{ ref or whatever }} work?
      #  uses: SuffolkLITLab/ALKiln@start_server_workflow
      #  with:
      #    SERVER_URL: "http://localhost"
      #    DOCASSEMBLE_DEVELOPER_API_KEY: "${{ env.DA_ADMIN_API_KEY }}"
      - name: Docker logs
        if: ${{ always() }}
        # TODO: create an arifact for this instead
        run: |
          docker logs $(docker ps --filter "ancestor=jhpyle/docassemble" --format {{.ID}})
        shell: bash
