name: "ALKiln/github_server: Isolated docassemble tests"
description: "Automatically test docassemble interviews on GitHub's servers, in an isolated environment. Avoids docassemble reload errors and other external factors"


inputs:
  CONFIG_CONTENTS:
    description: "The contents of the config file of the docassemble server"
    required: false
  # This is necessary to test pre-releases at the very least. It does seem
  # strange considering we're controlling everything through the action, but
  # that actually doesn't touch the npm version that's pulled in.
  ALKILN_VERSION:
    description: 'Version of ALKiln to get from npm.'
    required: false
    default: '^5.0.0'
  MAX_SECONDS_FOR_SETUP:
    description: "Amount of time to give the Project to upload your package's GitHub code."
    required: false
    default: '120'
  SERVER_RELOAD_TIMEOUT_SECONDS:
    description: "Max amount of time to give the server to reload if it needs to"
    required: false
    # no default to let the custom Scenario timeouts create the reload timeout


runs:
  using: "composite"
  steps:
      - name: "github_server: Set environment variables"
        run: |
          echo "DA_ADMIN_API_KEY=abcd1234abcd1234abcd5678abdc5678" >> $GITHUB_ENV
        shell: bash
      - name: Download and start docker
        run: |
          mkdir /tmp/config
          echo "$CONFIG_CONTENTS" > /tmp/config/myconfig.yml 
          docker pull brycewilley/smoldocassemble
          docker run --env DA_ADMIN_EMAIL="admin@example.com" --env DA_ADMIN_PASSWORD="password" --env DA_ADMIN_API_KEY="${{ env.DA_ADMIN_API_KEY }}" --env DA_CONFIG=/tmp/config/myconfig.yml --volume /tmp/config:/tmp/config --cap-add SYS_PTRACE --memory="4gb" -d -p 80:80 jhpyle/docassemble
          # TODO before merge: do a while loop here until `localhost` shows "It's ready"
          sleep 480
          curl localhost
        shell: bash
      - name: Run Kiln
        # TODO: Research how to get this to always be the same branch we're on
        uses: SuffolkLITLab/ALKiln@v5
        with:
          SERVER_URL: "http://localhost"
          DOCASSEMBLE_DEVELOPER_API_KEY: "${{ env.DA_ADMIN_API_KEY }}"
      - name: Docker logs
        # TODO: create an arifact for this instead
        run: |
          docker logs $(docker ps --filter "ancestor=jhpyle/docassemble" --format {{.ID}})
        shell: bash