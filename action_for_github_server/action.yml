name: "ALKiln isolated GitHub docassemble server tests"
description: "Download and start up a temporary docassemble server on GitHub's servers, in an isolated environment. Avoids docassemble reload errors and other external factors."

# If we want to control the version of the docassemble image, we'd have
# to make our own image:
# You can build your own image by doing git clone jhpyle/docassemble  and then
# using git checkout to select a particular version, and then using docker build
# to build an image. https://docassemble.org/docs/docker.html#downgrading
# If we just want to use an older version of da (as long as it works with
# the latest image):
# If you have an existing container you can use dainstall from the command
# line to install docassemble.webapp==1.4.68

inputs:
  CONFIG_CONTENTS:
    description: "The contents of the config file of the docassemble server."
    required: false
  SHOW_DOCKER_OUTPUT:
    description: 'Default is "false" to prevent docker from showing output in GitHub, like logs and artifacts. When set to "true", this will give you the docker output. It will be visible to those who can see the output, like people with admin or write permissions.'
    default: false
    required: false
  MAX_SECONDS_FOR_DOCKER:
    description: "Default is 600 seconds. Maximum amount of seconds to give the docassemble docker container to serve the site."
    required: false
    default: 600  # 10 min
  DOCASSEMBLECLI_VERSION:
    description: "The version of docassemblecli to install."
    required: false
    default: "0.0.17"

outputs:
  DOCASSEMBLE_DEVELOPER_API_KEY:
    description: 'Use this inside "with:" for the ALKiln step. Temporary admin api key. It will be destroyed after the tests are done.'
    value: ${{ steps.api_key_output_step.outputs.DOCASSEMBLE_DEVELOPER_API_KEY }}
  SERVER_URL:
    description: 'Use this inside "with:" for the ALKiln step. URL of the temporary docassemble server.'
    value: "http://localhost"
  DA_ADMIN_EMAIL:
    value: ${{ steps.api_key_output_step.outputs.DA_ADMIN_EMAIL }}
  DA_ADMIN_PASSWORD:
    value: ${{ steps.api_key_output_step.outputs.DA_ADMIN_PASSWORD }}


runs:
  using: "composite"
  steps:
      # Place the root directory in this branch
      - uses: actions/checkout@v3

      - name: "ALKiln GitHub server - Set environment variables"
        env:
          MAX_SECONDS_FOR_DOCKER: ${{ inputs.MAX_SECONDS_FOR_DOCKER }}
          DOCASSEMBLECLI_VERSION: ${{ inputs.DOCASSEMBLECLI_VERSION }}
        run: |
          # ALKiln GitHub server info: Set environment variables
          echo "MAX_SECONDS_FOR_DOCKER=$MAX_SECONDS_FOR_DOCKER" >> $GITHUB_ENV
          echo "DOCASSEMBLECLI_VERSION=$DOCASSEMBLECLI_VERSION" >> $GITHUB_ENV
          echo "DA_ADMIN_API_KEY=abcd1234abcd1234abcd5678abdc5678" >> $GITHUB_ENV
          echo "DA_ADMIN_EMAIL=admin@example.com" >> $GITHUB_ENV
          # Login will fail if this value is "password"
          echo "DA_ADMIN_PASSWORD=@123abcdefg" >> $GITHUB_ENV
        shell: bash
      - id: api_key_output_step
        run: |
          echo "DOCASSEMBLE_DEVELOPER_API_KEY=$DA_ADMIN_API_KEY" >> "$GITHUB_OUTPUT"
          echo "DA_ADMIN_EMAIL=$DA_ADMIN_EMAIL" >> "$GITHUB_OUTPUT"
          echo "DA_ADMIN_PASSWORD=$DA_ADMIN_PASSWORD" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: "ALKiln GitHub server - Get config"
        env:
          CONFIG: ${{ inputs.CONFIG_CONTENTS }}
        run: |
          # ALKiln GitHub server info: config values
          mkdir /tmp/config
          # Worth making this silent by defining a variable with > /dev/null...?
          if [ -n "$CONFIG" ]
          then
            echo "ALKiln GitHub server - The developer did provide a custom docassemble config file as an input into this action."
            echo "$CONFIG" > /tmp/config/myconfig.yml
            echo "CONFIG_ARGS=--env DA_CONFIG=/tmp/config/myconfig.yml --volume /tmp/config:/tmp/config " >> $GITHUB_ENV
          else
            echo "ALKiln GitHub server - The developer did NOT provide a custom docassemble config file as an input into this action. Docassemble will use its default config."
            echo "CONFIG_ARGS=" >> $GITHUB_ENV
          fi
        shell: bash

      # Question: If in future we allow GitHub variables instead of just secrets,
      # should we let those be visible or prevent them along with the docker logs?
      # Also, does GitHub hide job environment output of secrets as well as
      # hiding the secrets' output from the job console?

      # Define the var to prevent/show docker output based on action input
      - name: Env var for showing docker output
        env:
          SHOW_DOCKER_OUTPUT: ${{ inputs.SHOW_DOCKER_OUTPUT }}
        run: |
          # ALKiln GitHub server info: Docker logs visibility decision
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "OUTPUT_DOCKER=$SHOW_DOCKER_OUTPUT" >> $GITHUB_ENV
          else
            echo "OUTPUT_DOCKER=false" >> $GITHUB_ENV
          fi
        shell: bash

      # Messages about output
      - if: ${{ env.OUTPUT_DOCKER == 'false' }}
        run: |
          # ALKiln GitHub server info: no output
          printf '===\nALKiln GitHub server - GitHub will now stop showing output to avoid possibly showing details about your config. If you want to get output to see more of what is going on, use "with:" and set the input "SHOW_DOCKER_OUTPUT" to "true". This output will only be visible to those who can already see the action output, like people with admin or write permissions.\n==='
        shell: bash
      - if: ${{ env.OUTPUT_DOCKER == 'true' }}
        run: |
          # ALKiln GitHub server info: show output
          printf '===\nALKiln GitHub server - GitHub will now show the output of docker creation. ALKiln cannot control this output. If you want to prevent output, use "with:" and set the input "SHOW_DOCKER_OUTPUT" to "false". This output will only be visible to those who can already see the action output, like people with admin or write permissions.\n==='
        shell: bash

      # TODO: Reduce these to 1 block by putting ` > /dev/null 2>&1` into an env var
      # No output
      - name: "ALKiln GitHub server - Download and start docker silently"
        if: ${{ env.OUTPUT_DOCKER == 'false' }}
        env:
          CONFIG_ARGS: ${{ env.CONFIG_ARGS }}
        run: |
          # ALKiln GitHub server info: Silent docker pull/run
          docker pull jhpyle/docassemble > /dev/null 2>&1
          docker run --name docassemble_container \
                     --env DA_ADMIN_EMAIL="$DA_ADMIN_EMAIL" \
                     --env DA_ADMIN_PASSWORD="$DA_ADMIN_PASSWORD" \
                     --env DA_ADMIN_API_KEY="$DA_ADMIN_API_KEY" \
                     $CONFIG_ARGS \
                     --cap-add SYS_PTRACE \
                     --memory="4gb" -d -p 80:80 jhpyle/docassemble > /dev/null 2>&1
        shell: bash
      # With output
      - name: "ALKiln GitHub server - Download and start docker"
        if: ${{ env.OUTPUT_DOCKER == 'true' }}
        env:
          CONFIG_ARGS: ${{ env.CONFIG_ARGS }}
        run: |
          # ALKiln GitHub server info: Docker pull/run
          docker pull jhpyle/docassemble
          docker run --name docassemble_container \
                     --env DA_ADMIN_EMAIL="$DA_ADMIN_EMAIL" \
                     --env DA_ADMIN_PASSWORD="$DA_ADMIN_PASSWORD" \
                     --env DA_ADMIN_API_KEY="$DA_ADMIN_API_KEY" \
                     $CONFIG_ARGS \
                     --cap-add SYS_PTRACE \
                     --memory="4gb" -d -p 80:80 jhpyle/docassemble
        shell: bash

      # Show the time it takes to start the server.
      - if: ${{ env.OUTPUT_DOCKER == 'false' }}
        run: |
          # ALKiln GitHub server info: temporary visible logs
          echo "ALKiln GitHub server - ALKiln will show safe ALKiln-only output temporarily as ALKiln waits for the server to start"
        shell: bash

      - name: "ALKiln GitHub server - Wait for server to start"
        run: |
          # ALKiln GitHub server - Wait for server to start

          # Reset the SECONDS variable
          SECONDS=0
          # Wait 1 minute before pinging the server constantly
          sleep 60

          response="start"
          while [[ $response != *"200"* ]]; do
            echo "ALKiln GitHub server - Time elapsed: $SECONDS seconds"

            # Check if max seconds till loading has passed
            if [[ $SECONDS -ge $MAX_SECONDS_FOR_DOCKER ]]; then
              echo "ALKiln GitHub server Error: Timed out waiting for docker container to serve the site. If you want to give your docker container more timem to install, set the MAX_SECONDS_FOR_DOCKER input for this action."
              exit 1
            fi

            # Set the variable to a new string value in each iteration
            response=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:80/health_check?ready=1)
            echo "ALKiln GitHub server - response is $response"

            # Check if the string includes the desired text
            if [[ $response == *"200"* ]]; then
              echo "ALKiln GitHub server - Success! The docker container is ready!"
            else
              echo "ALKiln GitHub server - The docker container is not ready yet. Will check again in 30 seconds."
              sleep 30
            fi

          done
        shell: bash

      # Output visibility message
      - name: Message about docassemble install output
        if: ${{ env.OUTPUT_DOCKER == 'false' }}
        run: |
          # ALKiln GitHub server info: Silent install message
          echo "ALKiln GitHub server - ALKiln will now prevent output again"
        shell: bash

      # Don't rely on the environment's version of python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      # No output
      - run: pip install "docassemblecli==$DOCASSEMBLECLI_VERSION" > /dev/null 2>&1
        if: ${{ env.OUTPUT_DOCKER == 'false' }}
        shell: bash
      # Install the package, the current directory (.), onto the docassemble server
      - run: dainstall . --apiurl http://localhost --apikey $DA_ADMIN_API_KEY > /dev/null 2>&1
        if: ${{ env.OUTPUT_DOCKER == 'false' }}
        shell: bash

      # With output
      - run: pip install "docassemblecli==$DOCASSEMBLECLI_VERSION"
        if: ${{ env.OUTPUT_DOCKER == 'true' }}
        shell: bash
      # Install the package, the current directory (.), onto the docassemble server
      - run: dainstall . --apiurl http://localhost --apikey $DA_ADMIN_API_KEY
        if: ${{ env.OUTPUT_DOCKER == 'true' }}
        shell: bash

      # Upload artifacts that devs can download on the Actions summary page
      # Only if the developer wants to get that info, though
      - name: "ALKiln GitHub server - Get path names with date and time"
        if: ${{ always() && env.OUTPUT_DOCKER == 'true' }}
        run: |
          echo "GITHUB_SERVER_LOG_FILE_NAME=/tmp/alkiln_docker_logs-$(date +'%Y-%m-%d at %Hh%Mm%Ss' -u)UTC.txt" >> $GITHUB_ENV
          echo "GITHUB_SERVER_ARTIFACT_NAME=alkiln_github_server-$(date +'%Y-%m-%d at %Hh%Mm%Ss' -u)UTC" >> $GITHUB_ENV
        shell: bash
      - name: "ALKiln GitHub server - Docker output"
        if: ${{ always() && env.OUTPUT_DOCKER == 'true' }}
        run: |
          echo "$(docker output docassemble_container)" > "${{ env.GITHUB_SERVER_LOG_FILE_NAME }}"
        shell: bash
      - name: "ALKiln GitHub server - Upload artifacts folder"
        if: ${{ always() && env.OUTPUT_DOCKER == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GITHUB_SERVER_ARTIFACT_NAME }}
          path: ${{ env.GITHUB_SERVER_LOG_FILE_NAME }}

      - run: |
          # ALKiln GitHub server info: End silent output
          echo "ALKiln GitHub server - ALKiln will show output again"
        if: ${{ always() && env.OUTPUT_DOCKER == 'false' }}
        shell: bash

      - run: |
          # ALKiln GitHub server info: Done
          echo "ALKiln GitHub server - ALKiln will show output again"
        if: ${{ always() && env.OUTPUT_DOCKER == 'false' }}
        shell: bash
